@inject IJSRuntime JSRuntime
@page "/orders"
@using NorthwindTraders.Application.Interfaces
@inject IOrderService OrderService

<PageTitle>Orders - Northwind Traders</PageTitle>

<h1>Orders</h1>

<div class="d-flex justify-content-between mb-3 align-items-center">
    <div>
        <input type="text" class="form-control" placeholder="Search orders..." @bind="searchTerm" @bind:event="oninput" />
    </div>
    <div>
        <a href="orders/new" class="btn btn-primary">
            <span class="oi oi-plus"></span> New Order
        </a>
    </div>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (orders == null || !orders.Any())
{
    <div class="alert alert-info">
        No orders found.
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Order ID</th>
                    <th>Customer</th>
                    <th>Order Date</th>
                    <th>Status</th>
                    <th>Total</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in filteredOrders)
                {
                    <tr>
                        <td>@order.Id</td>
                        <td>@order.CustomerName</td>
                        <td>@order.OrderDate.ToShortDateString()</td>
                        <td>
                            <span class="badge bg-@GetStatusBadgeColor(order.Status)">
                                @order.Status
                            </span>
                        </td>
                        <td>@order.Total.ToString("C")</td>
                        <td>
                            <div class="btn-group" role="group">
                                <a href="orders/@order.Id" class="btn btn-sm btn-outline-primary">
                                    <span class="oi oi-eye"></span> View
                                </a>
                                <a href="orders/@order.Id/edit" class="btn btn-sm btn-outline-secondary">
                                    <span class="oi oi-pencil"></span> Edit
                                </a>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteOrder(order.Id)">
                                    <span class="oi oi-trash"></span> Delete
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<OrderDto> orders;
    private bool isLoading = true;
    private string searchTerm = "";

    private IEnumerable<OrderDto> filteredOrders => orders?
        .Where(o =>
            string.IsNullOrEmpty(searchTerm) ||
            o.Id.ToString().Contains(searchTerm) ||
            o.CustomerName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            o.Status.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
        );

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        try
        {
            isLoading = true;
            orders = await OrderService.GetAllOrdersAsync();
        }
        catch (Exception)
        {
            // Handle error
            orders = new List<OrderDto>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteOrder(int orderId)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete Order #{orderId}?"))
            return;

        try
        {
            await OrderService.DeleteOrderAsync(orderId);
            await LoadOrders();
        }
        catch (Exception)
        {
            // Handle error
        }
    }

    private string GetStatusBadgeColor(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "warning",
            OrderStatus.Shipped => "success",
            OrderStatus.Delivered => "info",
            OrderStatus.Cancelled => "danger",
            _ => "secondary"
        };
    }
}