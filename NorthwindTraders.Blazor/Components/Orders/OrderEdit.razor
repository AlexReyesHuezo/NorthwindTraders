@page "/orders/new"
@page "/orders/{id:int}/edit"
@using NorthwindTraders.Application.Interfaces
@inject IOrderService OrderService
@inject IAddressValidationService AddressValidationService
@inject NavigationManager NavigationManager

<PageTitle>@(Id == 0 ? "New Order" : $"Edit Order #{Id}") - Northwind Traders</PageTitle>

<h1>@(Id == 0 ? "New Order" : $"Edit Order #{Id}")</h1>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <EditForm Model="orderModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        Customer Information
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label class="form-label">Customer</label>
                            <CustomerSelect @bind-Value="orderModel.CustomerId" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Employee</label>
                            <InputSelect class="form-select" @bind-Value="orderModel.EmployeeId">
                                <option value="">-- Select Employee --</option>
                                @foreach (var employee in employees)
                                {
                                    <option value="@employee.Id">@employee.Name</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Order Date</label>
                            <InputDate class="form-control" @bind-Value="orderModel.OrderDate" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            <InputSelect class="form-select" @bind-Value="orderModel.Status">
                                @foreach (var status in Enum.GetValues(typeof(OrderStatus)))
                                {
                                    <option value="@status">@status</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        Shipping Address
                    </div>
                    <div class="card-body">
                        <AddressInput @bind-Address="orderModel.ShippingAddress" OnAddressValidated="OnAddressValidated" />
                        
                        @if (validatedAddress != null)
                        {
                            <div class="alert alert-success mt-3">
                                <h6>Validated Address</h6>
                                <p>
                                    @validatedAddress.Street<br />
                                    @validatedAddress.City, @validatedAddress.State @validatedAddress.PostalCode<br />
                                    @validatedAddress.Country
                                </p>
                            </div>
                            
                            @if (validatedAddress.Coordinates != null)
                            {
                                <div class="mt-3">
                                    <MapComponent Coordinates="validatedAddress.Coordinates" />
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <span>Order Items</span>
                <button type="button" class="btn btn-sm btn-primary" @onclick="AddOrderLine">
                    <span class="oi oi-plus"></span> Add Product
                </button>
            </div>
            <div class="card-body">
                <ProductLineItems @bind-OrderItems="orderModel.OrderDetails" />
            </div>
        </div>

        <div class="d-flex justify-content-between">
            <button type="button" class="btn btn-outline-secondary" @onclick="NavigateBack">Cancel</button>
            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Saving...</span>
                }
                else
                {
                    <span>Save Order</span>
                }
            </button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private OrderDto orderModel = new();
    private List<EmployeeDto> employees = new();
    private AddressDto validatedAddress;
    private bool isLoading = true;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load employees
            employees = await OrderService.GetEmployeesAsync();
            
            if (Id > 0)
            {
                // Edit mode - load order
                orderModel = await OrderService.GetOrderByIdAsync(Id);
                validatedAddress = orderModel.ShippingAddress;
            }
            else
            {
                // New order mode
                orderModel = new OrderDto
                {
                    OrderDate = DateTime.Now,
                    Status = OrderStatus.Pending,
                    OrderDetails = new List<OrderDetailDto>()
                };
            }
        }
        catch (Exception)
        {
            // Handle error
        }
        finally
        {
            isLoading = false;
        }
    }

    private void AddOrderLine()
    {
        orderModel.OrderDetails ??= new List<OrderDetailDto>();
        orderModel.OrderDetails.Add(new OrderDetailDto());
    }

    private async Task OnAddressValidated(AddressDto address)
    {
        validatedAddress = address;
        orderModel.ShippingAddress = address;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isSaving = true;
            
            if (Id == 0)
            {
                // Create new order
                var newOrderId = await OrderService.CreateOrderAsync(orderModel);
                NavigationManager.NavigateTo($"/orders/{newOrderId}");
            }
            else
            {
                // Update existing order
                await OrderService.UpdateOrderAsync(orderModel);
                NavigationManager.NavigateTo($"/orders/{Id}");
            }
        }
        catch (Exception)
        {
            // Handle error
            isSaving = false;
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo(Id == 0 ? "/orders" : $"/orders/{Id}");
    }
}

